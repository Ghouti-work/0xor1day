{"posts":[{"title":"C_language","text":"BasicsBasic syntax and functions from the C programming language.Boilerplate Code 12345#include&lt;stdio.h&gt;int main(){return(0);} printf functionIt is used to show output on the screen 1printf(&quot;Hello World!&quot;); scanf functionIt is used to take input from the user 1scanf(&quot;placeholder&quot;, variables) CommentsA comment is the code that is not executed by the compiler, and the programmer uses it to keep track of the code.Single line comment 1// It's a single line comment Multi-line comment 1234/* It's amulti-linecomment*/ Data typesThe data type is the type of data Character typeTypically a single octet(one byte). It is an integer type 1char variable_name; Integer typeThe most natural size of integer for the machine 1int variable_name; Float typeA single-precision floating-point value 1float variable_name; Double typeA double-precision floating-point value 1double variable_name; Void typeRepresents the absence of the type 1void Escape SequencesIt is a sequence of characters starting with a backslash, and it doesn’t represent itself when used inside string literal. Alarm or BeepIt produces a beep sound 1\\a BackspaceIt adds a backspace 1\\b Form feed1\\f NewlineNewline Character 1\\n Carriage return1\\r TabIt gives a tab space 1\\t BackslashIt adds a backslash 1\\\\ Single quoteIt adds a single quotation mark 1\\' Question markIt adds a question mark 1\\? Octal No.It represents the value of an octal number 1\\nnn Hexadecimal No.It represents the value of a hexadecimal number 1\\nhh NullThe null character is usually used to terminate a string 1\\0 Conditional InstructionsConditional statements are used to perform operations based on some condition. If Statement1234if (/* condition */){/* code */} If-else Statement1234567if (/* condition */){/* code */}else{/* Code */} if else-if Statement123456789if (condition) {// Statements;}else if (condition){// Statements;}else{// Statements} Switch Case StatementIt allows a variable to be tested for equality against a list of values (cases). 12345678910111213switch (expression){case constant-expression:statement1;statement2;break;case constant-expression:statement;break;...default:statement;} Iterative StatementsIterative statements facilitate programmers to execute any block of code lines repeatedly and can be controlled as per conditions added by the programmer. while LoopIt allows execution of statement inside the block of the loop until the condition of loop succeeds. 1234while (/* condition */){/* code */} do-while loopIt is an exit controlled loop. It is very similar to the while loop with one difference, i.e., the body of the do-while loop is executed at least once even if the expression is false 12345do{/* code */} while (/* condition */); for loopIt is used to iterate the statements or a part of the program several times. It is frequently used to traverse the data structures like the array and linked list. 1234for (int i = 0; i &lt; count; i++){/* code */} Break Statementbreak keyword inside the loop is used to terminate the loop 1break; Continue Statementcontinue keyword skips the rest of the current iteration of the loop and returns to the starting point of the loop 1continue; Functions &amp; RecursionFunctions are used to divide an extensive program into smaller pieces. It can be called multiple times to provide reusability and modularity to the C program. Function Definition123return_type function_name(data_type parameter...){//code to be executed} RecursionRecursion is when a function calls a copy of itself to work on a minor problem. And the function that calls itself is known as the Recursive function. 123456void recurse(){... .. ...recurse();... .. ...} PointersPointer is a variable that contains the address of another variable, Declaration1datatype *var_name; ArraysAn array is a collection of data items of the same type. Declaration1data_type array_name[array_size]; Accessing element1int variable_name = array[index]; StringsA string is a 1-D character array terminated by a null character (‘\\0’) Declaration1char str_name[size]; gets() functionIt allows you to enter multi-word string 1gets(&quot;string&quot;); puts() functionIt is used to show string output 1puts(&quot;string&quot;); String Functions strlen()It is used to calculate the length of the string 1strlen(string_name); strcpy() functionIt is used to copy the content of second-string into the first string passed to it 1strcpy(destination, source); strcat() functionIt is used to concatenate two strings 1strcat(first_string, second_string); strcmp() functionIt is used to compare two strings 1strcmp(first_string, second_string); StructuresThe structure is a collection of variables of different types under a single name. Defining structure means creating a new data type. Structure syntax123456struct structureName{dataType member1;dataType member2;...}; typedef keywordtypedef function allows users to provide alternative names for the primitive and user-defined data types. 1234567typedef struct structureName{dataType member1;dataType member2;9/11Home - CodeWithHarry...}new_name; File HandlingA set of methods for handling File IO (read/write/append) in C language FILE pointer1FILE *filePointer; Opening a fileIt is used to open file in C. 1filePointer = fopen(fileName.txt, w) fscanf() functionIt is used to read the content of file. 1fscanf(FILE *stream, const char *format, ...) fprintf() functionIt is used to write content into the file. 1fprintf(FILE *fptr, const char *str, ...); fgetc() functionIt reads a character from a file opened in read mode. It returns EOF on reaching the end of file. 1fgetc(FILE *pointer); fputc() functionIt writes a character to a file opened in write mode 1fputc(char, FILE *pointer); Closing a fileIt closes the file. 1fclose(filePointer); Dynamic Memory AllocationA set of functions for dynamic memory allocation from the heap. These methods are used to use the dynamic memory which makes our C programs more efficient malloc() functionStands for ‘Memory allocation’ and reserves a block of memory with the given amount of bytes. 1ptr = (castType*) malloc(size); calloc() functionStands for ‘Contiguous allocation’ and reserves n blocks of memory with the given amount of bytes. 1ptr = (castType*)calloc(n, size); free functionIt is used to free the allocated memory. 1free(ptr); realloc() functionIf the allocated memory is insufficient, then we can change the size of previously allocated memory using this function for efficiency purposes 1ptr = realloc(ptr, x);","link":"/0xor1Day/2023/09/21/C-language/"},{"title":"math","text":"This is an inline expression: \\(ax^2+bx+c=0\\). This is a block expression:$$\\displaystyle \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} =1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}}{1+\\frac{e^{-8\\pi}} {1+\\cdots} } } }$$ This is another block expression:\\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)e^{2 \\pi i \\xi x}d\\xi\\]","link":"/0xor1Day/2023/09/21/math/"}],"tags":[{"name":"C-language","slug":"C-language","link":"/0xor1Day/tags/C-language/"},{"name":"syntax","slug":"syntax","link":"/0xor1Day/tags/syntax/"}],"categories":[],"pages":[{"title":"","text":"[{\"name\":\"DASHENG-900x700-1.png\",\"date\":1518959551960},{\"name\":\"DASHENG-900x700-2.png\",\"date\":1518959599098},{\"name\":\"DASHENG-900x700-3.png\",\"date\":1518959609913},{\"name\":\"DASHENG-900x700-4.png\",\"date\":1518959618105}]","link":"/0xor1Day/hexo-admin-ehc-images.json"},{"title":"About","text":"hi my name is ghouti and i am student in cumpter scianse","link":"/0xor1Day/about/index.html"}]}